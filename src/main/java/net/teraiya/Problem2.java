package net.teraiya;

/**
 * Created by jteraiya on 11/27/14.
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class Problem2 {

    public static final int FOUR_MILLION = 4000000;

    /**
     * This recursive function will return the fibonacci series number at given index
     * @param num : Fibonacci Series Index
     * @return : Fibonnacci series value at given index
     */
    public int fiboRecursion(int num) {
        int fibo = 0;
        if (num > 0) {
            //Recursion base case
            if (num == 1 || num == 2) {
                fibo = 1;
            } else {
                fibo = fiboRecursion(num - 1) + fiboRecursion(num - 2);
            }
        }
        return fibo;
    }

    /**
     * This function solves the second Euler problem,
     * i.e. By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
     * @return : returns the sum of all the fibonacci number under four million
     */
    public int findEvenValueSumForFiboUnderFourMillion() {
        int sum = 0, i = 0, fibo;
        while ((fibo = fiboRecursion(i)) < FOUR_MILLION) {
            if (fibo % 2 == 0) {
                sum = sum + fibo;
            }
            i++;
        }
        return sum;
    }

}
